// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var SjclWithAll = require("sjcl-with-all");

var BitArray = {};

var Bn = {};

var Hex = {};

var Utf8String = {};

var Sha256 = {};

var Misc = {};

var Aes = {};

var Cipher = {
  Aes: Aes
};

var CCM = {};

var Mode = {
  CCM: CCM
};

var Random = {};

var Curve = {};

var Point = {};

var Ecc = {
  Curve: Curve,
  Point: Point
};

function toHex(t) {
  return t.serialize().point;
}

function fromHex(str) {
  return new (SjclWithAll.ecc.ecdsa.publicKey)(SjclWithAll.ecc.curves.c256, SjclWithAll.codec.hex.toBits(str));
}

var PublicKey = {
  toHex: toHex,
  fromHex: fromHex
};

function toHex$1(t) {
  return t.serialize().exponent;
}

function fromHex$1(str) {
  return new (SjclWithAll.ecc.ecdsa.secretKey)(SjclWithAll.ecc.curves.c256, SjclWithAll.bn.fromBits(SjclWithAll.codec.hex.toBits(str)));
}

var SecretKey = {
  toHex: toHex$1,
  fromHex: fromHex$1
};

function generateKeys(param) {
  return SjclWithAll.ecc.ecdsa.generateKeys(undefined, undefined, undefined);
}

function $$new(param) {
  var keys = SjclWithAll.ecc.ecdsa.generateKeys(undefined, undefined, undefined);
  return [
          keys.pub,
          keys.sec
        ];
}

var Ecdsa = {
  PublicKey: PublicKey,
  SecretKey: SecretKey,
  generateKeys: generateKeys,
  $$new: $$new
};

exports.BitArray = BitArray;
exports.Bn = Bn;
exports.Hex = Hex;
exports.Utf8String = Utf8String;
exports.Sha256 = Sha256;
exports.Misc = Misc;
exports.Cipher = Cipher;
exports.Mode = Mode;
exports.Random = Random;
exports.Ecc = Ecc;
exports.Ecdsa = Ecdsa;
/* sjcl-with-all Not a pure module */
