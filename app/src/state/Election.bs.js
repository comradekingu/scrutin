// Generated by ReScript, PLEASE EDIT WITH CARE
/* eslint-disable default-case */
/* eslint-disable no-throw-literal */

import * as X from "../helpers/X.bs.js";
import * as User from "./User.bs.js";
import * as Voter from "./Voter.bs.js";
import * as Ballot from "./Ballot.bs.js";
import * as Config from "../helpers/Config.bs.js";
import * as Belenios from "../helpers/Belenios.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Json$JsonCombinators from "rescript-json-combinators/src/Json.bs.js";
import * as Json_Decode$JsonCombinators from "rescript-json-combinators/src/Json_Decode.bs.js";
import * as Json_Encode$JsonCombinators from "rescript-json-combinators/src/Json_Encode.bs.js";

var initial_voters = [];

var initial_choices = [];

var initial_ballots = [];

var initial = {
  uuid: undefined,
  name: "",
  voters: initial_voters,
  choices: initial_choices,
  ballots: initial_ballots,
  params: undefined,
  trustees: undefined,
  creds: undefined,
  result: undefined
};

function to_json(r) {
  return {
          name: r.name,
          voters: Json_Encode$JsonCombinators.array(Voter.to_json, r.voters),
          choices: [],
          ballots: Json_Encode$JsonCombinators.array(Ballot.to_json, r.ballots),
          uuid: Json_Encode$JsonCombinators.option((function (prim) {
                  return prim;
                }), r.uuid),
          params: Json_Encode$JsonCombinators.option((function (prim) {
                  return prim;
                }), Belt_Option.map(r.params, (function (prim) {
                      return JSON.stringify(prim);
                    }))),
          trustees: Json_Encode$JsonCombinators.option((function (prim) {
                  return prim;
                }), r.trustees),
          creds: Json_Encode$JsonCombinators.option((function (prim) {
                  return prim;
                }), r.creds),
          result: Json_Encode$JsonCombinators.option((function (prim) {
                  return prim;
                }), r.result)
        };
}

var DecodeError = /* @__PURE__ */Caml_exceptions.create("Election.DecodeError");

function from_json(json) {
  var decode = Json_Decode$JsonCombinators.object(function (field) {
        return {
                uuid: field.required("uuid", Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.string)),
                name: field.required("name", Json_Decode$JsonCombinators.string),
                voters: field.required("voters", Json_Decode$JsonCombinators.array(Voter.from_json)),
                choices: [],
                ballots: field.required("ballots", Json_Decode$JsonCombinators.array(Ballot.from_json)),
                params: Belt_Option.map(field.required("params", Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.string)), (function (prim) {
                        return JSON.parse(prim);
                      })),
                trustees: field.required("trustees", Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.string)),
                creds: field.required("creds", Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.string)),
                result: field.required("result", Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.string))
              };
      });
  var result = Json$JsonCombinators.decode(json, decode);
  if (result.TAG === /* Ok */0) {
    return result._0;
  }
  throw {
        RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
        _1: result._0,
        Error: new Error()
      };
}

function get(uuid) {
  return fetch("" + Config.api_url + "/elections/" + uuid + "").then(function (prim) {
              return prim.json();
            });
}

function getAll(param) {
  return fetch("" + Config.api_url + "/elections").then(function (prim) {
              return prim.json();
            });
}

function post(election, user) {
  var dict = {};
  dict["election"] = to_json(election);
  dict["user"] = User.to_json(user);
  return X.post("" + Config.api_url + "/elections/", dict);
}

function post_ballot(election, ballot) {
  var url = "" + Config.api_url + "/elections/" + Belt_Option.getExn(election.uuid) + "/ballots";
  var payload = Ballot.to_json(ballot);
  return X.post(url, payload);
}

function post_result(election, result) {
  var url = "" + Config.api_url + "/elections/" + Belt_Option.getExn(election.uuid) + "/result";
  var dict = {};
  dict["result"] = result;
  return X.post(url, dict);
}

function createBallot(election, privateCredential, selection) {
  var trustees = Belt_Option.getExn(election.trustees);
  var ciphertext = Belenios.Election.vote(Belt_Option.getExn(election.params))(privateCredential, [selection], trustees);
  var uuid = Belt_Option.getExn(election.uuid);
  var publicCredential = Belenios.Credentials.derive(uuid, privateCredential);
  return {
          electionUuid: election.uuid,
          ciphertext: ciphertext,
          privateCredential: privateCredential,
          publicCredential: publicCredential
        };
}

function reducer(election, action) {
  if (typeof action === "number") {
    return election;
  }
  switch (action.TAG | 0) {
    case /* Election_SetResult */1 :
        return {
                uuid: election.uuid,
                name: election.name,
                voters: election.voters,
                choices: election.choices,
                ballots: election.ballots,
                params: election.params,
                trustees: election.trustees,
                creds: election.creds,
                result: action._0
              };
    case /* Election_SetName */2 :
        return {
                uuid: election.uuid,
                name: action._0,
                voters: election.voters,
                choices: election.choices,
                ballots: election.ballots,
                params: election.params,
                trustees: election.trustees,
                creds: election.creds,
                result: election.result
              };
    case /* Election_AddVoter */3 :
        return {
                uuid: election.uuid,
                name: election.name,
                voters: Belt_Array.concat(election.voters, [{
                        id: 0,
                        email: action._0,
                        privCred: "",
                        pubCred: ""
                      }]),
                choices: election.choices,
                ballots: election.ballots,
                params: election.params,
                trustees: election.trustees,
                creds: election.creds,
                result: election.result
              };
    case /* Election_RemoveVoter */4 :
        var index = action._0;
        return {
                uuid: election.uuid,
                name: election.name,
                voters: Belt_Array.keepWithIndex(election.voters, (function (param, i) {
                        return i !== index;
                      })),
                choices: election.choices,
                ballots: election.ballots,
                params: election.params,
                trustees: election.trustees,
                creds: election.creds,
                result: election.result
              };
    case /* Election_AddChoice */5 :
        return {
                uuid: election.uuid,
                name: election.name,
                voters: election.voters,
                choices: Belt_Array.concat(election.choices, [{
                        id: 0,
                        name: action._0
                      }]),
                ballots: election.ballots,
                params: election.params,
                trustees: election.trustees,
                creds: election.creds,
                result: election.result
              };
    case /* Election_RemoveChoice */6 :
        var index$1 = action._0;
        return {
                uuid: election.uuid,
                name: election.name,
                voters: election.voters,
                choices: Belt_Array.keepWithIndex(election.choices, (function (param, i) {
                        return i !== index$1;
                      })),
                ballots: election.ballots,
                params: election.params,
                trustees: election.trustees,
                creds: election.creds,
                result: election.result
              };
    default:
      return election;
  }
}

export {
  initial ,
  to_json ,
  DecodeError ,
  from_json ,
  get ,
  getAll ,
  post ,
  post_ballot ,
  post_result ,
  createBallot ,
  reducer ,
}
/* X Not a pure module */
