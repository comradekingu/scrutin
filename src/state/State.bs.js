// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belenios from "../Belenios.bs.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Election from "./Election.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactNative from "react-native";
import * as AsyncStorage from "@react-native-async-storage/async-storage";

var initial_elections = [];

var initial_user = {
  token: ""
};

var initial = {
  election: Election.initial,
  elections: initial_elections,
  elections_loading: false,
  user: initial_user,
  loading: false,
  route: /* Home */0
};

function effectLoadElections(dispatch) {
  Election.getAll(undefined).then(function (res) {
        var json_array = Js_json.decodeArray(res);
        if (json_array !== undefined) {
          return Curry._1(dispatch, {
                      TAG: /* Election_LoadAll */10,
                      _0: json_array
                    });
        } else {
          return Curry._1(dispatch, {
                      TAG: /* Election_LoadAll */10,
                      _0: []
                    });
        }
      });
}

function effectLoadElection(id, dispatch) {
  Election.get(id).then(function (o) {
        return Curry._1(dispatch, {
                    TAG: /* Election_Load */9,
                    _0: o
                  });
      });
}

function effectCreateElection(state, dispatch) {
  var match = Belenios.Trustees.create(undefined);
  var trustees = match[1];
  AsyncStorage.default.setItem(Belenios.Trustees.pubkey(trustees), match[0]);
  var params = Belenios.Election.create(state.election.name, "description", Belt_Array.map(state.election.choices, (function (o) {
              return o.name;
            })), trustees);
  var uuid = Belenios.Election.uuid(params);
  var match$1 = Belenios.Credentials.create(uuid, state.election.voters.length);
  var pubcreds = match$1[0];
  var creds = Belt_Array.zip(pubcreds, match$1[1]);
  var voters = Belt_Array.map(Belt_Array.zip(state.election.voters, creds), (function (param) {
          var match = param[1];
          var voterWithoutCred = param[0];
          return {
                  id: voterWithoutCred.id,
                  email: voterWithoutCred.email,
                  privCred: match[1],
                  pubCred: match[0]
                };
        }));
  var init = state.election;
  var election_id = init.id;
  var election_name = init.name;
  var election_choices = init.choices;
  var election_ballots = init.ballots;
  var election_uuid = uuid;
  var election_params = params;
  var election_trustees = trustees;
  var election_creds = JSON.stringify(pubcreds);
  var election_result = init.result;
  var election = {
    id: election_id,
    name: election_name,
    voters: voters,
    choices: election_choices,
    ballots: election_ballots,
    uuid: election_uuid,
    params: election_params,
    trustees: election_trustees,
    creds: election_creds,
    result: election_result
  };
  Election.post(election).then(function (prim) {
            return prim.json();
          }).then(Election.from_json).then(function (election) {
        var id = election.id;
        return Curry._1(dispatch, {
                    TAG: /* Navigate */12,
                    _0: {
                      TAG: /* ElectionBooth */1,
                      _0: id
                    }
                  });
      });
}

function effectBallotCreate(state, token, selection, dispatch) {
  var ballot = Election.createBallot(state.election, token, selection);
  Election.post_ballot(state.election, ballot).then(function (res) {
        console.log(res);
      });
}

function effectPublishElectionResult(state, result, dispatch) {
  Election.post_result(state.election, result).then(function (param) {
        Curry._1(dispatch, {
              TAG: /* Election_SetResult */1,
              _0: result
            });
      });
}

function effectGoToUrl(dispatch) {
  ReactNative.Linking.getInitialURL().then(function (res) {
        var sUrl = Belt_Option.getWithDefault(res === null ? undefined : Caml_option.some(res), "");
        var url = new URL(sUrl);
        var oResult = /^\/elections\/(.*)/g.exec(url.pathname);
        var capture;
        if (oResult !== null) {
          var str = Belt_Array.get(oResult, 1);
          capture = str !== undefined ? Caml_option.nullable_to_opt(Caml_option.valFromOption(str)) : undefined;
        } else {
          capture = undefined;
        }
        if (capture !== undefined) {
          return Curry._1(dispatch, {
                      TAG: /* Navigate */12,
                      _0: {
                        TAG: /* ElectionBooth */1,
                        _0: Belt_Option.getWithDefault(Belt_Int.fromString(capture), 0)
                      }
                    });
        }
        
      });
}

function reducer(state, action) {
  if (typeof action === "number") {
    if (action === /* Init */0) {
      return [
              {
                election: state.election,
                elections: state.elections,
                elections_loading: true,
                user: state.user,
                loading: state.loading,
                route: state.route
              },
              [
                effectGoToUrl,
                effectLoadElections
              ]
            ];
    } else {
      return [
              state,
              [(function (param) {
                    return effectCreateElection(state, param);
                  })]
            ];
    }
  }
  switch (action.TAG | 0) {
    case /* Election_PublishResult */0 :
        var result = action._0;
        return [
                state,
                [(function (param) {
                      return effectPublishElectionResult(state, result, param);
                    })]
              ];
    case /* Election_Fetch */8 :
        var id = action._0;
        return [
                {
                  election: {
                    id: id,
                    name: Election.initial.name,
                    voters: Election.initial.voters,
                    choices: Election.initial.choices,
                    ballots: Election.initial.ballots,
                    uuid: Election.initial.uuid,
                    params: Election.initial.params,
                    trustees: Election.initial.trustees,
                    creds: Election.initial.creds,
                    result: Election.initial.result
                  },
                  elections: state.elections,
                  elections_loading: state.elections_loading,
                  user: state.user,
                  loading: true,
                  route: state.route
                },
                [(function (param) {
                      return effectLoadElection(id, param);
                    })]
              ];
    case /* Election_Load */9 :
        return [
                {
                  election: Election.from_json(action._0),
                  elections: state.elections,
                  elections_loading: state.elections_loading,
                  user: state.user,
                  loading: false,
                  route: state.route
                },
                []
              ];
    case /* Election_LoadAll */10 :
        return [
                {
                  election: state.election,
                  elections: Belt_Array.reverse(Belt_Array.map(action._0, Election.from_json)),
                  elections_loading: false,
                  user: state.user,
                  loading: state.loading,
                  route: state.route
                },
                []
              ];
    case /* Ballot_Create */11 :
        var selection = action._1;
        var token = action._0;
        return [
                state,
                [(function (param) {
                      return effectBallotCreate(state, token, selection, param);
                    })]
              ];
    case /* Navigate */12 :
        var route = action._0;
        var effects;
        if (typeof route === "number") {
          effects = [];
        } else {
          var id$1 = route._0;
          effects = [(function (param) {
                return effectLoadElection(id$1, param);
              })];
        }
        return [
                {
                  election: state.election,
                  elections: state.elections,
                  elections_loading: state.elections_loading,
                  user: state.user,
                  loading: state.loading,
                  route: route
                },
                effects
              ];
    default:
      return [
              {
                election: Election.reducer(state.election, action),
                elections: state.elections,
                elections_loading: state.elections_loading,
                user: state.user,
                loading: state.loading,
                route: state.route
              },
              []
            ];
  }
}

export {
  initial ,
  effectLoadElections ,
  effectLoadElection ,
  effectCreateElection ,
  effectBallotCreate ,
  effectPublishElectionResult ,
  effectGoToUrl ,
  reducer ,
}
/* Belenios Not a pure module */
