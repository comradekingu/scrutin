// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Election from "./Election.bs.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as SentBallot from "./SentBallot.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

var initial_elections = [];

var initial_user = {
  token: ""
};

var initial = {
  init: false,
  election: Election.initial,
  elections: initial_elections,
  elections_loading: false,
  user: initial_user,
  ballot: SentBallot.initial,
  loading: false,
  route: /* Home */0
};

function effectLoadElections(param, dispatch) {
  Election.getAll(undefined).then(function (res) {
        var json_array = Js_json.decodeArray(res);
        if (json_array !== undefined) {
          return Curry._1(dispatch, {
                      TAG: /* LoadElections */8,
                      _0: json_array
                    });
        } else {
          return Curry._1(dispatch, {
                      TAG: /* LoadElections */8,
                      _0: []
                    });
        }
      });
}

function effectLoadElection(id, dispatch) {
  var token = Js_string.sliceToEnd(1, window.location.hash);
  Curry._1(dispatch, {
        TAG: /* SetToken */1,
        _0: token
      });
  Election.get(id).then(function (o) {
        Curry._1(dispatch, {
              TAG: /* LoadElection */7,
              _0: o
            });
      });
}

function effectCreateElection(state, dispatch) {
  Election.post(state.election).then(function (prim) {
            return prim.json();
          }).then(Election.from_json).then(function (election) {
        var id = election.id;
        return Curry._1(dispatch, {
                    TAG: /* Navigate */10,
                    _0: /* ElectionShow */{
                      _0: id
                    }
                  });
      });
}

function effectBallotCreate(state, dispatch) {
  Election.post_ballot(state.election, state.ballot).then(function (param) {
        RescriptReactRouter.push("/elections/" + String(state.election.id) + "/success");
      });
}

function reducer(state, action) {
  if (typeof action === "number") {
    if (action === /* Init */0) {
      return [
              {
                init: true,
                election: state.election,
                elections: state.elections,
                elections_loading: true,
                user: state.user,
                ballot: state.ballot,
                loading: state.loading,
                route: state.route
              },
              [(function (param) {
                    return effectLoadElections(undefined, param);
                  })]
            ];
    } else {
      return [
              state,
              [(function (param) {
                    return effectCreateElection(state, param);
                  })]
            ];
    }
  }
  switch (action.TAG | 0) {
    case /* SetToken */1 :
        return [
                {
                  init: state.init,
                  election: state.election,
                  elections: state.elections,
                  elections_loading: state.elections_loading,
                  user: {
                    token: action._0
                  },
                  ballot: state.ballot,
                  loading: state.loading,
                  route: state.route
                },
                []
              ];
    case /* FetchElection */6 :
        var id = action._0;
        return [
                {
                  init: state.init,
                  election: {
                    id: id,
                    name: Election.initial.name,
                    voters: Election.initial.voters,
                    choices: Election.initial.choices,
                    ballots: Election.initial.ballots
                  },
                  elections: state.elections,
                  elections_loading: state.elections_loading,
                  user: state.user,
                  ballot: state.ballot,
                  loading: true,
                  route: state.route
                },
                [(function (param) {
                      return effectLoadElection(id, param);
                    })]
              ];
    case /* LoadElection */7 :
        return [
                {
                  init: state.init,
                  election: Election.from_json(action._0),
                  elections: state.elections,
                  elections_loading: state.elections_loading,
                  user: state.user,
                  ballot: state.ballot,
                  loading: false,
                  route: state.route
                },
                []
              ];
    case /* LoadElections */8 :
        return [
                {
                  init: state.init,
                  election: state.election,
                  elections: action._0.map(Election.from_json),
                  elections_loading: false,
                  user: state.user,
                  ballot: state.ballot,
                  loading: state.loading,
                  route: state.route
                },
                []
              ];
    case /* BallotCreate */9 :
        var newState_init = state.init;
        var newState_election = state.election;
        var newState_elections = state.elections;
        var newState_elections_loading = state.elections_loading;
        var newState_user = state.user;
        var newState_ballot = {
          electionId: state.election.id,
          choiceId: action._0,
          token: state.user.token
        };
        var newState_loading = state.loading;
        var newState_route = state.route;
        var newState = {
          init: newState_init,
          election: newState_election,
          elections: newState_elections,
          elections_loading: newState_elections_loading,
          user: newState_user,
          ballot: newState_ballot,
          loading: newState_loading,
          route: newState_route
        };
        return [
                newState,
                [(function (param) {
                      return effectBallotCreate(newState, param);
                    })]
              ];
    case /* Navigate */10 :
        var route = action._0;
        var effects;
        if (typeof route === "number") {
          effects = [];
        } else {
          var id$1 = route._0;
          effects = [(function (param) {
                return effectLoadElection(id$1, param);
              })];
        }
        return [
                {
                  init: state.init,
                  election: state.election,
                  elections: state.elections,
                  elections_loading: state.elections_loading,
                  user: state.user,
                  ballot: state.ballot,
                  loading: state.loading,
                  route: route
                },
                effects
              ];
    default:
      return [
              {
                init: state.init,
                election: Election.reducer(state.election, action),
                elections: state.elections,
                elections_loading: state.elections_loading,
                user: state.user,
                ballot: state.ballot,
                loading: state.loading,
                route: state.route
              },
              []
            ];
  }
}

var context = React.createContext(initial);

var provider = context.Provider;

function State$StateContext$Provider(Props) {
  var value = Props.value;
  var children = Props.children;
  return React.createElement(provider, {
              value: value,
              children: children
            });
}

var Provider = {
  provider: provider,
  make: State$StateContext$Provider
};

var StateContext = {
  context: context,
  Provider: Provider
};

var context$1 = React.createContext(function (_action) {
      
    });

var provider$1 = context$1.Provider;

function State$DispatchContext$Provider(Props) {
  var value = Props.value;
  var children = Props.children;
  return React.createElement(provider$1, {
              value: value,
              children: children
            });
}

var Provider$1 = {
  provider: provider$1,
  make: State$DispatchContext$Provider
};

var DispatchContext = {
  context: context$1,
  Provider: Provider$1
};

function useContextState(param) {
  return React.useContext(context);
}

function useContextDispatch(param) {
  return React.useContext(context$1);
}

function useContexts(param) {
  return [
          React.useContext(context),
          React.useContext(context$1)
        ];
}

export {
  initial ,
  effectLoadElections ,
  effectLoadElection ,
  effectCreateElection ,
  effectBallotCreate ,
  reducer ,
  StateContext ,
  DispatchContext ,
  useContextState ,
  useContextDispatch ,
  useContexts ,
}
/* context Not a pure module */
