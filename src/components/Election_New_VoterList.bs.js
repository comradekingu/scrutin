// Generated by ReScript, PLEASE EDIT WITH CARE

import * as X from "../helpers/X.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as ReactNative from "react-native";
import * as ReactNativePaper from "react-native-paper";

function Election_New_VoterList$Item(Props) {
  var onRemove = Props.onRemove;
  var name = Props.name;
  return React.createElement(ReactNativePaper.List.Item, {
              onPress: (function (param) {
                  
                }),
              title: name,
              left: (function (param) {
                  return React.createElement(ReactNativePaper.List.Icon, {
                              icon: "vote"
                            });
                }),
              right: (function (param) {
                  return React.createElement(ReactNativePaper.Button, {
                              onPress: onRemove,
                              children: React.createElement(ReactNativePaper.List.Icon, {
                                    icon: "delete"
                                  })
                            });
                })
            });
}

var Item = {
  make: Election_New_VoterList$Item
};

function Election_New_VoterList$AddModal(Props) {
  var showModal = Props.showModal;
  var setShowModal = Props.setShowModal;
  var setVoters = Props.setVoters;
  var match = React.useState(function () {
        return "";
      });
  var setEmail = match[1];
  var email = match[0];
  var onSubmit = function (param) {
    Curry._1(setVoters, (function (voters) {
            return Belt_Array.concat(voters, [email]);
          }));
    Curry._1(setEmail, (function (param) {
            return "";
          }));
    Curry._1(setShowModal, (function (param) {
            return false;
          }));
  };
  return React.createElement(ReactNativePaper.Modal, {
              visible: showModal,
              onDismiss: (function (param) {
                  Curry._1(setShowModal, (function (param) {
                          return false;
                        }));
                }),
              children: React.createElement(ReactNative.View, {
                    style: ReactNative.StyleSheet.flatten([
                          X.styles.modal,
                          X.styles.layout
                        ]),
                    testID: "voter-modal",
                    children: null
                  }, React.createElement(ReactNativePaper.TextInput, {
                        mode: "flat",
                        autoFocus: true,
                        label: "Email du participant",
                        value: email,
                        onChangeText: (function (text) {
                            Curry._1(setEmail, (function (param) {
                                    return text;
                                  }));
                          }),
                        onSubmitEditing: onSubmit,
                        testID: "voter-email"
                      }), React.createElement(X.Row.make, {
                        children: null
                      }, React.createElement(X.Col.make, {
                            children: React.createElement(ReactNativePaper.Button, {
                                  onPress: (function (param) {
                                      Curry._1(setEmail, (function (param) {
                                              return "";
                                            }));
                                      Curry._1(setShowModal, (function (param) {
                                              return false;
                                            }));
                                    }),
                                  children: "Retour"
                                })
                          }), React.createElement(X.Col.make, {
                            children: React.createElement(ReactNativePaper.Button, {
                                  mode: "contained",
                                  onPress: onSubmit,
                                  children: "Ajouter"
                                })
                          })))
            });
}

var AddModal = {
  make: Election_New_VoterList$AddModal
};

function Election_New_VoterList(Props) {
  var voters = Props.voters;
  var setVoters = Props.setVoters;
  var match = React.useState(function () {
        return false;
      });
  var setShowModal = match[1];
  var match$1 = React.useState(function () {
        return false;
      });
  var setVisibleError = match$1[1];
  var header = React.createElement(X.Row.make, {
        children: null
      }, React.createElement(X.Col.make, {
            children: React.createElement(ReactNativePaper.Text, {
                  style: X.styles.title,
                  children: "Voters"
                })
          }), React.createElement(X.Col.make, {
            children: React.createElement(ReactNativePaper.Text, {
                  children: ""
                })
          }), React.createElement(X.Col.make, {
            children: React.createElement(ReactNativePaper.Button, {
                  mode: "contained",
                  onPress: (function (param) {
                      Curry._1(setShowModal, (function (param) {
                              return true;
                            }));
                    }),
                  children: "Ajouter"
                })
          }));
  return React.createElement(ReactNative.View, {
              testID: "voter-list",
              children: null
            }, header, React.createElement(ReactNative.View, {
                  children: Belt_Array.mapWithIndex(voters, (function (i, voter) {
                          return React.createElement(Election_New_VoterList$Item, {
                                      onRemove: (function (param) {
                                          Curry._1(setVoters, (function (voters) {
                                                  return Belt_Array.keepWithIndex(voters, (function (param, index) {
                                                                return index !== i;
                                                              }));
                                                }));
                                        }),
                                      name: voter,
                                      key: String(i)
                                    });
                        }))
                }), React.createElement(ReactNativePaper.HelperText, {
                  style: X.styles.center,
                  visible: voters.length < 1,
                  type: "error",
                  children: "Il faut au moins 1 votant !"
                }), React.createElement(ReactNativePaper.Portal, {
                  children: null
                }, React.createElement(Election_New_VoterList$AddModal, {
                      showModal: match[0],
                      setShowModal: setShowModal,
                      setVoters: setVoters
                    }), React.createElement(ReactNativePaper.Snackbar, {
                      onDismiss: (function (param) {
                          Curry._1(setVisibleError, (function (param) {
                                  return false;
                                }));
                        }),
                      visible: match$1[0],
                      children: "Invalid email"
                    })));
}

var make = Election_New_VoterList;

export {
  Item ,
  AddModal ,
  make ,
}
/* X Not a pure module */
