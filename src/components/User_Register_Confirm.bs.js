// Generated by ReScript, PLEASE EDIT WITH CARE

import * as X from "../helpers/X.bs.js";
import * as $$URL from "../helpers/URL.bs.js";
import * as Sjcl from "../helpers/Sjcl.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Config from "../helpers/Config.bs.js";
import * as Context from "../state/Context.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as ReactNativePaper from "react-native-paper";

function User_Register_Confirm(Props) {
  var match = React.useState(function () {
        
      });
  var setSecret = match[1];
  var secret = match[0];
  var match$1 = React.useState(function () {
        
      });
  var setEmail = match$1[1];
  var email = match$1[0];
  var match$2 = React.useState(function () {
        return false;
      });
  var setShowDetails = match$2[1];
  var showDetails = match$2[0];
  var match$3 = Context.use(undefined);
  var dispatch = match$3[1];
  React.useEffect(function () {
        var email = $$URL.getSearchParameter("email");
        var secret = $$URL.getSearchParameter("secret");
        if (email !== "") {
          Curry._1(setEmail, (function (param) {
                  return email;
                }));
        }
        if (secret !== "") {
          Curry._1(setSecret, (function (param) {
                  return secret;
                }));
        }
        
      });
  var onSubmit = function (param) {
    if (email !== undefined && secret !== undefined) {
      var match = Sjcl.Ecdsa.$$new(undefined);
      var secretKey = match[1];
      var publicKey = match[0];
      var dict = {};
      dict["email"] = email;
      dict["secret"] = secret;
      dict["publicKey"] = Curry._1(Sjcl.Ecdsa.PublicKey.toHex, publicKey);
      X.post("" + Config.api_url + "/users/email_confirmation", dict).then(function (param) {
            var user_publicKey = Curry._1(Sjcl.Ecdsa.PublicKey.toHex, publicKey);
            var user_secretKey = Curry._1(Sjcl.Ecdsa.SecretKey.toHex, secretKey);
            var user = {
              id: 0,
              email: email,
              publicKey: user_publicKey,
              secretKey: user_secretKey
            };
            Curry._1(dispatch, {
                  TAG: /* User_Login */13,
                  _0: user
                });
          });
      return ;
    }
    ((window.alert('Empty email or secret')));
  };
  return React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.Title, {
                  style: X.styles.center,
                  children: "Enregistrement..."
                }), showDetails ? React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.TextInput, {
                        mode: "flat",
                        label: "Email",
                        value: Belt_Option.getWithDefault(email, ""),
                        onChangeText: (function (text) {
                            Curry._1(setEmail, (function (param) {
                                    if (text === "") {
                                      return ;
                                    } else {
                                      return text;
                                    }
                                  }));
                          }),
                        testID: "email-input"
                      }), React.createElement(ReactNativePaper.TextInput, {
                        mode: "flat",
                        label: "Secret",
                        value: Belt_Option.getWithDefault(secret, ""),
                        onChangeText: (function (text) {
                            Curry._1(setSecret, (function (param) {
                                    if (text === "") {
                                      return ;
                                    } else {
                                      return text;
                                    }
                                  }));
                          }),
                        testID: "secret-input"
                      })) : React.createElement(React.Fragment, undefined), React.createElement(ReactNativePaper.Button, {
                  mode: "contained",
                  onPress: onSubmit,
                  children: "S'enregistrer"
                }), showDetails ? React.createElement(ReactNativePaper.Button, {
                    onPress: (function (param) {
                        Curry._1(setShowDetails, (function (param) {
                                return false;
                              }));
                      }),
                    children: "Cacher les details"
                  }) : React.createElement(ReactNativePaper.Button, {
                    onPress: (function (param) {
                        Curry._1(setShowDetails, (function (param) {
                                return true;
                              }));
                      }),
                    children: "Afficher les details"
                  }));
}

var make = User_Register_Confirm;

export {
  make ,
}
/* X Not a pure module */
